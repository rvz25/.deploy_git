<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cross-Site Scripting (XSS)</title>
      <link href="/2024/04/08/XSS/"/>
      <url>/2024/04/08/XSS/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/XSS.jpg" alt="alt text"></p><h1 id="Cross-Site-Scripting-XSS"><a href="#Cross-Site-Scripting-XSS" class="headerlink" title="Cross-Site Scripting (XSS)"></a>Cross-Site Scripting (XSS)</h1><p>Cross-Site scripting (XSS) is a client-side web vulnerability that allows attackers to inject malicious scripts into web pages.</p><p>This vulnerability is typically caused by a lack of input sanitization&#x2F;validation in web applications</p><p>Attackers leverage XSS vulnerabilities to inject malicious code into web applications. Because XSS is a client side vulnerability, these scripts are executed by the victims browser.</p><p>There are 3 types of Cross-Site Scripting(XSS) attacks :</p><ul><li><p>Reflected XSS</p></li><li><p>Stored XSS</p></li><li><p>DOM-Based XSS</p></li></ul><h1 id="Reflected-XSS"><a href="#Reflected-XSS" class="headerlink" title="Reflected XSS"></a>Reflected XSS</h1><p>Reflected&#x2F;non-persistent cross-site scripting is the most common form of<br>XSS and involves tricking a victim into clicking a specially crafted link (with an XSS payload) to the vulnerable website.</p><p>When the victim clicks on the link the website includes the XSS payload as part of the response back to the victims browser, where the payload is executed.</p><h3 id="Exemple-of-a-Reflected-XSS-attack"><a href="#Exemple-of-a-Reflected-XSS-attack" class="headerlink" title="Exemple of a Reflected XSS attack:"></a>Exemple of a Reflected XSS attack:</h3><p><code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p><p>With this test we can also find out if the Web Application has some kind of filtering or not.</p><p>While this serves as just one among various XSS tests, it remains imperative to conduct thorough assessments for comprehensive security evaluation.</p><h1 id="Stored-XSS"><a href="#Stored-XSS" class="headerlink" title="Stored XSS"></a>Stored XSS</h1><p>Stored&#x2F;persistent cross-site scripting is a vulnerability where an attacker is able to inject Javascript code into a web application’s database or source code via an input that is not sanitised.</p><p>For example, if an attacker is able to inject a malicious XSS payload in to a webpage on a website without proper sanitisation  the XSS payload injected in to the webpage will be executed by the browser of anyone that visits that webpage.</p><h3 id="Example-of-a-Stored-XSS-attack"><a href="#Example-of-a-Stored-XSS-attack" class="headerlink" title="Example of a Stored XSS attack:"></a>Example of a Stored XSS attack:</h3><p>Let’s consider a website that allows users to post comments. The website doesn’t properly sanitize user input, so a malicious user could craft a comment containing JavaScript code. For instance:</p><p><code>&lt;script&gt;alert(&#39;Hello, I am a malicious script!&#39;)&lt;/script&gt;</code></p><p><code>If this comment is stored on the server and not properly sanitized, whenever a user visits the page displaying comments, this script will execute in their browser, showing an alert with the message &quot;Hello, I am a malicious script!&quot;. This is a basic example of a Stored XSS attack where the malicious script is stored on the server and executed whenever the compromised page is accessed.</code></p><h1 id="DOM-Based-XSS"><a href="#DOM-Based-XSS" class="headerlink" title="DOM-Based XSS"></a>DOM-Based XSS</h1><p>DOM-Based XSS&#x2F;type-0 XSS is a type of XSS vulnerability that allows an attacker to inject malicious payloads into a webpage by exploiting a weakness in the DOM of the web application.</p><p>A DOM-Based XSS attack involves exploiting a script on the webpage that takes user input and reflects it back to the page without proper sanitisation, the attacker then injects malicious code&#x2F;payloads into the webpage’s DOM by modifying the values of the script’s variables.</p><h3 id="Example-of-a-DOM-Based-XSS-attack"><a href="#Example-of-a-DOM-Based-XSS-attack" class="headerlink" title="Example of a DOM-Based XSS attack:"></a>Example of a DOM-Based XSS attack:</h3><p>Suppose there’s a website with a search feature that dynamically updates the page based on the user’s input without proper sanitization. A malicious user could manipulate the URL parameters like so:</p><p><a href="https://vulnerable-website.com/search?query=%60">https://vulnerable-website.com/search?query=`</a><script>alert('Hello, I am a malicious script!')</script>&#96;</p><p>In this example, the website’s JavaScript code might retrieve the search query from the URL and directly inject it into the page’s DOM without proper sanitization. As a result, the script included in the URL parameter would execute within the context of the page, displaying an alert box with the message <code>Hello, I am a malicious script!</code> (You’ve see it when you clicked on this post :) ).This illustrates how a DOM-based XSS attack can occur entirely on the client-side, manipulating the DOM environment to execute malicious scripts.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>It’s essential for developers and website administrators to implement robust security measures, such as input validation and output encoding, to mitigate the risk of XSS vulnerabilities. By understanding the various forms of XSS attacks and adopting proactive security practices, organizations can better safeguard their web applications and protect users from potential exploitation.</p><hr><h4 id="Thank-you-for-exploring-this-insightful-overview-of-XSS-attacks-Implementing-vigilant-security-measures-is-crucial-in-safeguarding-web-applications-and-ensuring-a-secure-online-environment-for-all-Wishing-you-a-pleasant-and-secure-browsing-experience-Have-a-great-day"><a href="#Thank-you-for-exploring-this-insightful-overview-of-XSS-attacks-Implementing-vigilant-security-measures-is-crucial-in-safeguarding-web-applications-and-ensuring-a-secure-online-environment-for-all-Wishing-you-a-pleasant-and-secure-browsing-experience-Have-a-great-day" class="headerlink" title="Thank you for exploring this insightful overview of XSS attacks. Implementing vigilant security measures is crucial in safeguarding web applications and ensuring a secure online environment for all. Wishing you a pleasant and secure browsing experience. Have a great day!"></a>Thank you for exploring this insightful overview of XSS attacks. Implementing vigilant security measures is crucial in safeguarding web applications and ensuring a secure online environment for all. Wishing you a pleasant and secure browsing experience. Have a great day!</h4><hr>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Injector</title>
      <link href="/2024/04/07/injector/"/>
      <url>/2024/04/07/injector/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/bannner.png" alt="alt text"></p><p>Challange Link Cyber-EDU:<br><a href="https://app.cyber-edu.co/challenges/c2599f90-44a4-11ed-84b2-51fa576b3d4d?tenant=cyberedu">https://app.cyber-edu.co/challenges/c2599f90-44a4-11ed-84b2-51fa576b3d4d?tenant=cyberedu</a></p><h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><p>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell.</p><h1 id="Walktrough"><a href="#Walktrough" class="headerlink" title="Walktrough"></a>Walktrough</h1><p>Browse to the IP Addres Given:</p><p><img src="/../images/injection.png" alt="alt text"></p><p>With the help of google we found a command injection to paste <code>(%20%0Acat%20|/bin/cat%20flag.php)</code> :</p><p><img src="/../images/injection2.png" alt="alt text"></p><p>→ View Page Source → We found the flag:<br><code>C0mm4nd_1nj3c5i0n_1s_E4sy</code></p><p><img src="/../images/flag.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ROCSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>robots</title>
      <link href="/2024/04/07/robots/"/>
      <url>/2024/04/07/robots/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/robots.png" alt="alt text"></p><p>Challange Link from Cyber-EDU :<br><a href="https://app.cyber-edu.co/challenges/1e37bac0-44a5-11ed-b4d6-0f0819dfa676?tenant=cyberedu">https://app.cyber-edu.co/challenges/1e37bac0-44a5-11ed-b4d6-0f0819dfa676?tenant=cyberedu</a></p><h1 id="Robots-txt"><a href="#Robots-txt" class="headerlink" title="Robots.txt"></a>Robots.txt</h1><p>Robots.txt is a text file webmasters create to instruct web robots (typically search engine robots) how to crawl pages on their website. The robots.txt file is part of the the robots exclusion protocol (REP), a group of web standards that regulate how robots crawl the web, access and index content, and serve that content up to users. The REP also includes directives like meta robots, as well as page-, subdirectory-, or site-wide instructions for how search engines should treat links (such as “follow” or “nofollow”)c</p><h1 id="Walktrough"><a href="#Walktrough" class="headerlink" title="Walktrough"></a>Walktrough</h1><p>First we paste the address we got in our browser and this is what we get :  </p><p><img src="/../images/image.png" alt="alt text"></p><p>With a tool named <code>nuclei</code> we found a directory <code>robots.txt</code> :</p><p><code>└─$ nuclei -u http://34.159.76.30:31714/ </code>  </p><p>Found:<br><code>[robots-txt-endpoint] [http] [info] http://34.159.76.30:31714/robots.txt</code></p><p>Let’s try to go into <code>/robots.txt</code> :</p><p><img src="/../images/Screenshot%202024-04-07%20at%2010.25.39.png" alt="alt text"></p><p>We found something interesting &#x2F;g00d_old_mus1c.php , if we dig deep and go into that let’s see what we find :</p><p><img src="/../images/Screenshot%202024-04-07%20at%2010.45.13.png" alt="alt text"></p><p>And we got the Flag : CTF{Kr4ftw3rk_4nd_th3_r0b0ts}</p>]]></content>
      
      
      
        <tags>
            
            <tag> ROCSC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
